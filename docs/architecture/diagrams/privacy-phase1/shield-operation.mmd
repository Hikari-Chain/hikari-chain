sequenceDiagram
    participant Alice
    participant Client
    participant Validator
    participant Privacy as x/privacy

    Alice->>Client: Shield 100ulight

    Note over Client: 1. Generate keys
    Note over Client: - ephemeral_r
    Note over Client: - secret
    Note over Client: - blinding

    Note over Client: 2. Create stealth address
    Note over Client: OneTimeAddress {
    Note over Client:   P = Hs(r*V)*G + S
    Note over Client:   R = r*G
    Note over Client: }

    Note over Client: 3. Create Pedersen commitment
    Note over Client: C = amount*H + blinding*G
    Note over Client: C = 100*H + b*G

    Note over Client: 4. Encrypt amount
    Note over Client: Encrypt(amount, blinding)<br/>with ECDH shared secret

    Client->>Validator: MsgShield {<br/>  sender: alice,<br/>  amount: 100ulight,<br/>  stealth_address: OneTimeAddr,<br/>  commitment: C,<br/>  encrypted_amount<br/>}

    Validator->>Privacy: ValidateBasic()
    Privacy-->>Validator: OK

    Validator->>Privacy: CheckBalance(alice)
    Privacy-->>Validator: Balance: 1000 ✓

    Validator->>Privacy: ValidateStealthAddress()
    Note over Privacy: Check EC points on curve
    Privacy-->>Validator: Valid ✓

    Validator->>Privacy: BurnCoins(alice, 100)
    Privacy-->>Validator: OK

    Validator->>Privacy: AddDeposit(deposit)
    Privacy-->>Validator: Index: 42

    Privacy->>Privacy: EmitEvent(Shield)

    Validator-->>Client: Response {<br/>  deposit_index: 42<br/>}

    Client-->>Alice: Success!<br/>(100ulight shielded at index 42)

    Note over Alice,Privacy: ⚠️ Visible to observers:
    Note over Alice,Privacy: • Alice's address
    Note over Alice,Privacy: • Deposit index: 42
    Note over Alice,Privacy: ✓ Hidden: actual amount
