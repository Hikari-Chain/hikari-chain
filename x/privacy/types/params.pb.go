// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hikari/privacy/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the privacy module.
type Params struct {
	// Enabled controls whether the privacy module is active.
	// If false, all privacy operations are disabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// AllowedDenoms is the list of denominations that can be shielded.
	// This list is controlled by governance.
	// Example: ["ulight", "uphoton"]
	AllowedDenoms []string `protobuf:"bytes,2,rep,name=allowed_denoms,json=allowedDenoms,proto3" json:"allowed_denoms,omitempty"`
	// MinShieldAmounts defines the minimum amount that can be shielded per denomination.
	// This prevents dust attacks and spam.
	// Map: denom -> minimum amount
	// Example: {"ulight": "1", "uphoton": "1000000"}
	MinShieldAmounts map[string]string `protobuf:"bytes,3,rep,name=min_shield_amounts,json=minShieldAmounts,proto3" json:"min_shield_amounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// MaxDepositsPerTx limits the number of outputs in a single PrivateTransfer.
	// This prevents DoS attacks via excessive computation.
	// Recommended: 16
	MaxDepositsPerTx uint32 `protobuf:"varint,4,opt,name=max_deposits_per_tx,json=maxDepositsPerTx,proto3" json:"max_deposits_per_tx,omitempty"`
	// MerkleTreeDepth defines the depth of the Merkle tree used in Phase 2.
	// A depth of 32 supports 2^32 (~4.3 billion) deposits per denomination.
	// This parameter cannot be changed after genesis without a hard fork.
	MerkleTreeDepth uint32 `protobuf:"varint,5,opt,name=merkle_tree_depth,json=merkleTreeDepth,proto3" json:"merkle_tree_depth,omitempty"`
	// ProofSystem specifies which zero-knowledge proof system to use in Phase 2.
	// Valid values: "groth16", "plonk"
	// This parameter is only used in Phase 2.
	ProofSystem string `protobuf:"bytes,6,opt,name=proof_system,json=proofSystem,proto3" json:"proof_system,omitempty"`
	// MaxMemoSize limits the size of encrypted memos in notes.
	// Recommended: 512 bytes
	MaxMemoSize uint32 `protobuf:"varint,7,opt,name=max_memo_size,json=maxMemoSize,proto3" json:"max_memo_size,omitempty"`
	// NullifierCacheDuration defines how many blocks to cache nullifiers
	// for fast double-spend checking.
	// Recommended: 100000 blocks (~7 days at 6s block time)
	NullifierCacheDuration int64 `protobuf:"varint,8,opt,name=nullifier_cache_duration,json=nullifierCacheDuration,proto3" json:"nullifier_cache_duration,omitempty"`
	// Phase controls which implementation is active.
	// Valid values: "phase1" (testnet), "phase2" (mainnet)
	Phase string `protobuf:"bytes,9,opt,name=phase,proto3" json:"phase,omitempty"`
	// ShieldGasCost is the base gas cost for a shield operation.
	ShieldGasCost uint64 `protobuf:"varint,10,opt,name=shield_gas_cost,json=shieldGasCost,proto3" json:"shield_gas_cost,omitempty"`
	// UnshieldGasCost is the base gas cost for an unshield operation.
	UnshieldGasCost uint64 `protobuf:"varint,11,opt,name=unshield_gas_cost,json=unshieldGasCost,proto3" json:"unshield_gas_cost,omitempty"`
	// PrivateTransferGasCost is the base gas cost for a private transfer.
	// Additional gas is charged per input/output.
	PrivateTransferGasCost uint64 `protobuf:"varint,12,opt,name=private_transfer_gas_cost,json=privateTransferGasCost,proto3" json:"private_transfer_gas_cost,omitempty"`
	// VerifyProofGasCost is the gas cost for verifying a ZK proof (Phase 2).
	VerifyProofGasCost uint64 `protobuf:"varint,13,opt,name=verify_proof_gas_cost,json=verifyProofGasCost,proto3" json:"verify_proof_gas_cost,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_109d51d1b486280d, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Params) GetAllowedDenoms() []string {
	if m != nil {
		return m.AllowedDenoms
	}
	return nil
}

func (m *Params) GetMinShieldAmounts() map[string]string {
	if m != nil {
		return m.MinShieldAmounts
	}
	return nil
}

func (m *Params) GetMaxDepositsPerTx() uint32 {
	if m != nil {
		return m.MaxDepositsPerTx
	}
	return 0
}

func (m *Params) GetMerkleTreeDepth() uint32 {
	if m != nil {
		return m.MerkleTreeDepth
	}
	return 0
}

func (m *Params) GetProofSystem() string {
	if m != nil {
		return m.ProofSystem
	}
	return ""
}

func (m *Params) GetMaxMemoSize() uint32 {
	if m != nil {
		return m.MaxMemoSize
	}
	return 0
}

func (m *Params) GetNullifierCacheDuration() int64 {
	if m != nil {
		return m.NullifierCacheDuration
	}
	return 0
}

func (m *Params) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *Params) GetShieldGasCost() uint64 {
	if m != nil {
		return m.ShieldGasCost
	}
	return 0
}

func (m *Params) GetUnshieldGasCost() uint64 {
	if m != nil {
		return m.UnshieldGasCost
	}
	return 0
}

func (m *Params) GetPrivateTransferGasCost() uint64 {
	if m != nil {
		return m.PrivateTransferGasCost
	}
	return 0
}

func (m *Params) GetVerifyProofGasCost() uint64 {
	if m != nil {
		return m.VerifyProofGasCost
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "hikari.privacy.v1.Params")
	proto.RegisterMapType((map[string]string)(nil), "hikari.privacy.v1.Params.MinShieldAmountsEntry")
}

func init() { proto.RegisterFile("hikari/privacy/v1/params.proto", fileDescriptor_109d51d1b486280d) }

var fileDescriptor_109d51d1b486280d = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4d, 0x6f, 0xd3, 0x3e,
	0x18, 0x5f, 0xd6, 0xbd, 0xd5, 0x5d, 0xff, 0xdb, 0xfc, 0xdf, 0x26, 0xaf, 0x87, 0x10, 0x26, 0x81,
	0xa2, 0x49, 0x4b, 0x34, 0xe0, 0x30, 0x76, 0x83, 0x16, 0xc1, 0x65, 0x68, 0xca, 0x76, 0x42, 0x42,
	0x96, 0x97, 0x3e, 0x6d, 0xac, 0xc5, 0x71, 0x64, 0xbb, 0xa5, 0xdd, 0x47, 0xe0, 0xc4, 0x47, 0xe1,
	0x33, 0x70, 0xe2, 0xb8, 0x23, 0x47, 0xb4, 0x1e, 0xf8, 0x1a, 0x28, 0x76, 0xba, 0xa1, 0xc1, 0xa5,
	0xf2, 0xf3, 0x7b, 0x79, 0x9e, 0xe6, 0x67, 0x3f, 0xc8, 0xcf, 0xf8, 0x15, 0x53, 0x3c, 0x2e, 0x15,
	0x1f, 0xb3, 0x74, 0x1a, 0x8f, 0x8f, 0xe2, 0x92, 0x29, 0x26, 0x74, 0x54, 0x2a, 0x69, 0x24, 0xde,
	0x72, 0x7c, 0x54, 0xf3, 0xd1, 0xf8, 0xa8, 0xb3, 0x97, 0x4a, 0x2d, 0xa4, 0xa6, 0x56, 0x10, 0xbb,
	0xc2, 0xa9, 0x3b, 0xdb, 0x43, 0x39, 0x94, 0x0e, 0xaf, 0x4e, 0x35, 0xba, 0xc5, 0x04, 0x2f, 0x64,
	0x6c, 0x7f, 0x1d, 0xb4, 0xff, 0x6d, 0x19, 0xad, 0x9c, 0xd9, 0x39, 0x98, 0xa0, 0x55, 0x28, 0xd8,
	0x65, 0x0e, 0x7d, 0xe2, 0x05, 0x5e, 0xb8, 0x96, 0xcc, 0x4b, 0xfc, 0x04, 0xfd, 0xc7, 0xf2, 0x5c,
	0x7e, 0x82, 0x3e, 0xed, 0x43, 0x21, 0x85, 0x26, 0x8b, 0x41, 0x23, 0x6c, 0x26, 0xed, 0x1a, 0xed,
	0x59, 0x10, 0x7f, 0x44, 0x58, 0xf0, 0x82, 0xea, 0x8c, 0x43, 0xde, 0xa7, 0x4c, 0xc8, 0x51, 0x61,
	0x34, 0x69, 0x04, 0x8d, 0xb0, 0xf5, 0x2c, 0x8e, 0xfe, 0xfa, 0xff, 0x91, 0x9b, 0x1b, 0x9d, 0xf2,
	0xe2, 0xdc, 0x5a, 0x5e, 0x39, 0xc7, 0x9b, 0xc2, 0xa8, 0x69, 0xb2, 0x29, 0x1e, 0xc0, 0xf8, 0x10,
	0xfd, 0x2f, 0xd8, 0x84, 0xf6, 0xa1, 0x94, 0x9a, 0x1b, 0x4d, 0x4b, 0x50, 0xd4, 0x4c, 0xc8, 0x52,
	0xe0, 0x85, 0xed, 0x64, 0x53, 0xb0, 0x49, 0xaf, 0x66, 0xce, 0x40, 0x5d, 0x4c, 0xf0, 0x01, 0xda,
	0x12, 0xa0, 0xae, 0x72, 0xa0, 0x46, 0x01, 0x54, 0x36, 0x93, 0x91, 0x65, 0x2b, 0xde, 0x70, 0xc4,
	0x85, 0x02, 0xe8, 0x55, 0x30, 0x7e, 0x8c, 0xd6, 0x4b, 0x25, 0xe5, 0x80, 0xea, 0xa9, 0x36, 0x20,
	0xc8, 0x4a, 0xe0, 0x85, 0xcd, 0xa4, 0x65, 0xb1, 0x73, 0x0b, 0xe1, 0x7d, 0xd4, 0xae, 0xa6, 0x0b,
	0x10, 0x92, 0x6a, 0x7e, 0x0d, 0x64, 0xd5, 0xb6, 0x6a, 0x09, 0x36, 0x39, 0x05, 0x21, 0xcf, 0xf9,
	0x35, 0xe0, 0x63, 0x44, 0x8a, 0x51, 0x9e, 0xf3, 0x01, 0x07, 0x45, 0x53, 0x96, 0x66, 0x40, 0xfb,
	0x23, 0xc5, 0x0c, 0x97, 0x05, 0x59, 0x0b, 0xbc, 0xb0, 0x91, 0xec, 0xde, 0xf1, 0xdd, 0x8a, 0xee,
	0xd5, 0x2c, 0xde, 0x46, 0xcb, 0x65, 0xc6, 0x34, 0x90, 0xa6, 0x9d, 0xec, 0x0a, 0xfc, 0x14, 0x6d,
	0xd4, 0x61, 0x0e, 0x99, 0xa6, 0xa9, 0xd4, 0x86, 0xa0, 0xc0, 0x0b, 0x97, 0x92, 0xb6, 0x83, 0xdf,
	0x32, 0xdd, 0x95, 0xda, 0x54, 0x9f, 0x3a, 0x2a, 0x1e, 0x2a, 0x5b, 0x56, 0xb9, 0x31, 0x27, 0xe6,
	0xda, 0x97, 0x68, 0xcf, 0x5e, 0x81, 0xa9, 0x72, 0x61, 0x85, 0x1e, 0x80, 0xba, 0xf7, 0xac, 0x5b,
	0xcf, 0x6e, 0x2d, 0xb8, 0xa8, 0xf9, 0xb9, 0xf5, 0x08, 0xed, 0x8c, 0x41, 0xf1, 0xc1, 0x94, 0xba,
	0xb0, 0xee, 0x6c, 0x6d, 0x6b, 0xc3, 0x8e, 0x3c, 0xab, 0xb8, 0xda, 0xd2, 0xe9, 0xa2, 0x9d, 0x7f,
	0x5e, 0x2f, 0xde, 0x44, 0x8d, 0x2b, 0x98, 0xda, 0x87, 0xd6, 0x4c, 0xaa, 0x63, 0x15, 0xc1, 0x98,
	0xe5, 0x23, 0x20, 0x8b, 0x2e, 0x02, 0x5b, 0x9c, 0x2c, 0x1e, 0x7b, 0x27, 0x8f, 0x3e, 0xff, 0xfa,
	0x7a, 0xd0, 0xa9, 0xf7, 0x63, 0xf2, 0xe7, 0x86, 0xb8, 0x17, 0xf4, 0xfa, 0xfd, 0xf7, 0x5b, 0xdf,
	0xbb, 0xb9, 0xf5, 0xbd, 0x9f, 0xb7, 0xbe, 0xf7, 0x65, 0xe6, 0x2f, 0xdc, 0xcc, 0xfc, 0x85, 0x1f,
	0x33, 0x7f, 0xe1, 0xc3, 0x8b, 0x21, 0x37, 0xd9, 0xe8, 0x32, 0x4a, 0xa5, 0x88, 0xdf, 0xd9, 0x06,
	0x87, 0xdd, 0x8c, 0xf1, 0x22, 0x76, 0xdd, 0x0e, 0x53, 0x5b, 0xdc, 0xf7, 0x34, 0xd3, 0x12, 0xf4,
	0xe5, 0x8a, 0xdd, 0x8d, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xd0, 0x03, 0x3b, 0x94,
	0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyProofGasCost != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VerifyProofGasCost))
		i--
		dAtA[i] = 0x68
	}
	if m.PrivateTransferGasCost != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PrivateTransferGasCost))
		i--
		dAtA[i] = 0x60
	}
	if m.UnshieldGasCost != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnshieldGasCost))
		i--
		dAtA[i] = 0x58
	}
	if m.ShieldGasCost != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ShieldGasCost))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Phase) > 0 {
		i -= len(m.Phase)
		copy(dAtA[i:], m.Phase)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Phase)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NullifierCacheDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NullifierCacheDuration))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxMemoSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxMemoSize))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ProofSystem) > 0 {
		i -= len(m.ProofSystem)
		copy(dAtA[i:], m.ProofSystem)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProofSystem)))
		i--
		dAtA[i] = 0x32
	}
	if m.MerkleTreeDepth != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MerkleTreeDepth))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxDepositsPerTx != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxDepositsPerTx))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MinShieldAmounts) > 0 {
		for k := range m.MinShieldAmounts {
			v := m.MinShieldAmounts[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintParams(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AllowedDenoms) > 0 {
		for iNdEx := len(m.AllowedDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedDenoms[iNdEx])
			copy(dAtA[i:], m.AllowedDenoms[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if len(m.AllowedDenoms) > 0 {
		for _, s := range m.AllowedDenoms {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.MinShieldAmounts) > 0 {
		for k, v := range m.MinShieldAmounts {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + len(v) + sovParams(uint64(len(v)))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	if m.MaxDepositsPerTx != 0 {
		n += 1 + sovParams(uint64(m.MaxDepositsPerTx))
	}
	if m.MerkleTreeDepth != 0 {
		n += 1 + sovParams(uint64(m.MerkleTreeDepth))
	}
	l = len(m.ProofSystem)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxMemoSize != 0 {
		n += 1 + sovParams(uint64(m.MaxMemoSize))
	}
	if m.NullifierCacheDuration != 0 {
		n += 1 + sovParams(uint64(m.NullifierCacheDuration))
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.ShieldGasCost != 0 {
		n += 1 + sovParams(uint64(m.ShieldGasCost))
	}
	if m.UnshieldGasCost != 0 {
		n += 1 + sovParams(uint64(m.UnshieldGasCost))
	}
	if m.PrivateTransferGasCost != 0 {
		n += 1 + sovParams(uint64(m.PrivateTransferGasCost))
	}
	if m.VerifyProofGasCost != 0 {
		n += 1 + sovParams(uint64(m.VerifyProofGasCost))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDenoms = append(m.AllowedDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShieldAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinShieldAmounts == nil {
				m.MinShieldAmounts = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MinShieldAmounts[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositsPerTx", wireType)
			}
			m.MaxDepositsPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDepositsPerTx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTreeDepth", wireType)
			}
			m.MerkleTreeDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerkleTreeDepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemoSize", wireType)
			}
			m.MaxMemoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemoSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullifierCacheDuration", wireType)
			}
			m.NullifierCacheDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullifierCacheDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldGasCost", wireType)
			}
			m.ShieldGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnshieldGasCost", wireType)
			}
			m.UnshieldGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnshieldGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateTransferGasCost", wireType)
			}
			m.PrivateTransferGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateTransferGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyProofGasCost", wireType)
			}
			m.VerifyProofGasCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyProofGasCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
