// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hikari/privacy/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the privacy module's genesis state.
type GenesisState struct {
	// Module parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// All private deposits across all denominations
	Deposits []PrivateDeposit `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits"`
	// Next deposit index per denomination
	// Map: denom -> next_index
	NextDepositIndices map[string]uint64 `protobuf:"bytes,3,rep,name=next_deposit_indices,json=nextDepositIndices,proto3" json:"next_deposit_indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Used nullifiers to prevent double-spending
	UsedNullifiers []UsedNullifier `protobuf:"bytes,4,rep,name=used_nullifiers,json=usedNullifiers,proto3" json:"used_nullifiers"`
	// Merkle tree state per denomination (Phase 2 only)
	MerkleTrees []DenomMerkleTree `protobuf:"bytes,5,rep,name=merkle_trees,json=merkleTrees,proto3" json:"merkle_trees"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5698b9222bdec14, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetDeposits() []PrivateDeposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *GenesisState) GetNextDepositIndices() map[string]uint64 {
	if m != nil {
		return m.NextDepositIndices
	}
	return nil
}

func (m *GenesisState) GetUsedNullifiers() []UsedNullifier {
	if m != nil {
		return m.UsedNullifiers
	}
	return nil
}

func (m *GenesisState) GetMerkleTrees() []DenomMerkleTree {
	if m != nil {
		return m.MerkleTrees
	}
	return nil
}

// UsedNullifier tracks a spent nullifier with metadata.
type UsedNullifier struct {
	// The nullifier hash
	Nullifier []byte `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// Block height where it was spent
	SpentAtHeight int64 `protobuf:"varint,2,opt,name=spent_at_height,json=spentAtHeight,proto3" json:"spent_at_height,omitempty"`
	// Transaction hash that spent it
	SpentTxHash string `protobuf:"bytes,3,opt,name=spent_tx_hash,json=spentTxHash,proto3" json:"spent_tx_hash,omitempty"`
	// Denomination of the spent deposit
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *UsedNullifier) Reset()         { *m = UsedNullifier{} }
func (m *UsedNullifier) String() string { return proto.CompactTextString(m) }
func (*UsedNullifier) ProtoMessage()    {}
func (*UsedNullifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5698b9222bdec14, []int{1}
}
func (m *UsedNullifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsedNullifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsedNullifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsedNullifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsedNullifier.Merge(m, src)
}
func (m *UsedNullifier) XXX_Size() int {
	return m.Size()
}
func (m *UsedNullifier) XXX_DiscardUnknown() {
	xxx_messageInfo_UsedNullifier.DiscardUnknown(m)
}

var xxx_messageInfo_UsedNullifier proto.InternalMessageInfo

func (m *UsedNullifier) GetNullifier() []byte {
	if m != nil {
		return m.Nullifier
	}
	return nil
}

func (m *UsedNullifier) GetSpentAtHeight() int64 {
	if m != nil {
		return m.SpentAtHeight
	}
	return 0
}

func (m *UsedNullifier) GetSpentTxHash() string {
	if m != nil {
		return m.SpentTxHash
	}
	return ""
}

func (m *UsedNullifier) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// DenomMerkleTree represents the Merkle tree state for a denomination (Phase 2).
type DenomMerkleTree struct {
	// Denomination
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Current Merkle root
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// Tree depth (should match params.merkle_tree_depth)
	Depth uint32 `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	// Number of leaves in the tree
	LeafCount uint64 `protobuf:"varint,4,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
	// Merkle tree nodes stored as key-value pairs
	// This is a sparse representation storing only non-empty nodes
	// Key format: level || index (5 bytes: 1 byte level + 4 bytes index)
	// Value: 32-byte hash
	Nodes map[string][]byte `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DenomMerkleTree) Reset()         { *m = DenomMerkleTree{} }
func (m *DenomMerkleTree) String() string { return proto.CompactTextString(m) }
func (*DenomMerkleTree) ProtoMessage()    {}
func (*DenomMerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5698b9222bdec14, []int{2}
}
func (m *DenomMerkleTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomMerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomMerkleTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomMerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomMerkleTree.Merge(m, src)
}
func (m *DenomMerkleTree) XXX_Size() int {
	return m.Size()
}
func (m *DenomMerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomMerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_DenomMerkleTree proto.InternalMessageInfo

func (m *DenomMerkleTree) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomMerkleTree) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *DenomMerkleTree) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *DenomMerkleTree) GetLeafCount() uint64 {
	if m != nil {
		return m.LeafCount
	}
	return 0
}

func (m *DenomMerkleTree) GetNodes() map[string][]byte {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "hikari.privacy.v1.GenesisState")
	proto.RegisterMapType((map[string]uint64)(nil), "hikari.privacy.v1.GenesisState.NextDepositIndicesEntry")
	proto.RegisterType((*UsedNullifier)(nil), "hikari.privacy.v1.UsedNullifier")
	proto.RegisterType((*DenomMerkleTree)(nil), "hikari.privacy.v1.DenomMerkleTree")
	proto.RegisterMapType((map[string][]byte)(nil), "hikari.privacy.v1.DenomMerkleTree.NodesEntry")
}

func init() { proto.RegisterFile("hikari/privacy/v1/genesis.proto", fileDescriptor_d5698b9222bdec14) }

var fileDescriptor_d5698b9222bdec14 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x8e, 0x6b, 0xb7, 0xfa, 0x65, 0x93, 0xfc, 0x02, 0xab, 0x48, 0xb8, 0x11, 0xb8, 0x21, 0x07,
	0x94, 0x4b, 0x6c, 0xb5, 0x20, 0xb5, 0xe2, 0x46, 0xd3, 0x8a, 0x20, 0x44, 0x40, 0xa6, 0x5c, 0xb8,
	0x58, 0xae, 0x3d, 0x8d, 0x57, 0x89, 0x77, 0x2d, 0xef, 0x3a, 0x4a, 0x9e, 0x02, 0x1e, 0xab, 0xc7,
	0x1e, 0x39, 0x20, 0x84, 0x92, 0x07, 0xe0, 0x15, 0x90, 0x77, 0x9d, 0x3f, 0x90, 0xa0, 0xde, 0x66,
	0xbe, 0xf9, 0xe6, 0x9b, 0x6f, 0x34, 0xbb, 0xe8, 0x28, 0x22, 0x23, 0x3f, 0x25, 0x4e, 0x92, 0x92,
	0x89, 0x1f, 0xcc, 0x9c, 0xc9, 0xb1, 0x33, 0x04, 0x0a, 0x9c, 0x70, 0x3b, 0x49, 0x99, 0x60, 0xf8,
	0xa1, 0x22, 0xd8, 0x05, 0xc1, 0x9e, 0x1c, 0x37, 0x1b, 0x43, 0x36, 0x64, 0xb2, 0xea, 0xe4, 0x91,
	0x22, 0x36, 0x0f, 0x03, 0xc6, 0x63, 0xc6, 0x3d, 0x55, 0x50, 0x49, 0x51, 0xb2, 0xb6, 0x87, 0x24,
	0x7e, 0xea, 0xc7, 0xcb, 0xfa, 0x0e, 0x13, 0xcb, 0x71, 0x92, 0xd0, 0xfe, 0xae, 0xa3, 0xea, 0x6b,
	0x65, 0xeb, 0xa3, 0xf0, 0x05, 0xe0, 0x53, 0x74, 0xa0, 0x14, 0x4c, 0xad, 0xa5, 0x75, 0x2a, 0x27,
	0x87, 0xf6, 0x96, 0x4d, 0xfb, 0x83, 0x24, 0x9c, 0x1b, 0xb7, 0x3f, 0x8e, 0x4a, 0x6e, 0x41, 0xc7,
	0x3d, 0xf4, 0x5f, 0x08, 0x09, 0xe3, 0x44, 0x70, 0x73, 0xaf, 0xa5, 0x77, 0x2a, 0x27, 0x4f, 0x77,
	0xb5, 0xe6, 0xa1, 0x80, 0x0b, 0xc5, 0x2c, 0x24, 0x56, 0x8d, 0x98, 0xa0, 0x06, 0x85, 0xa9, 0xf0,
	0x0a, 0xc0, 0x23, 0x34, 0x24, 0x01, 0x70, 0x53, 0x97, 0x82, 0xa7, 0x3b, 0x04, 0x37, 0xcd, 0xdb,
	0x03, 0x98, 0x8a, 0x42, 0xfa, 0x8d, 0xea, 0xbc, 0xa4, 0x22, 0x9d, 0xb9, 0x98, 0x6e, 0x15, 0xf0,
	0x7b, 0x54, 0xcf, 0x38, 0x84, 0x1e, 0xcd, 0xc6, 0x63, 0x72, 0x43, 0x20, 0xe5, 0xa6, 0x21, 0xa7,
	0xb4, 0x76, 0x4c, 0xf9, 0xc4, 0x21, 0x1c, 0x2c, 0x89, 0x85, 0xeb, 0xff, 0xb3, 0x4d, 0x90, 0xe3,
	0xb7, 0xa8, 0x1a, 0x43, 0x3a, 0x1a, 0x83, 0x27, 0x52, 0x00, 0x6e, 0xee, 0x4b, 0xb5, 0xf6, 0x0e,
	0xb5, 0x0b, 0xa0, 0x2c, 0x7e, 0x27, 0xb9, 0x57, 0x29, 0x40, 0xa1, 0x57, 0x89, 0x57, 0x08, 0x6f,
	0x5e, 0xa2, 0x47, 0xff, 0x58, 0x06, 0x3f, 0x40, 0xfa, 0x08, 0x66, 0xf2, 0x3c, 0x65, 0x37, 0x0f,
	0x71, 0x03, 0xed, 0x4f, 0xfc, 0x71, 0x06, 0xe6, 0x5e, 0x4b, 0xeb, 0x18, 0xae, 0x4a, 0x5e, 0xee,
	0x9d, 0x69, 0xed, 0x2f, 0x1a, 0xaa, 0xfd, 0xe1, 0x1d, 0x3f, 0x46, 0xe5, 0xd5, 0xc6, 0x52, 0xa3,
	0xea, 0xae, 0x01, 0xfc, 0x0c, 0xd5, 0x79, 0x02, 0x54, 0x78, 0xbe, 0xf0, 0x22, 0x20, 0xc3, 0x48,
	0x48, 0x4d, 0xdd, 0xad, 0x49, 0xf8, 0x95, 0xe8, 0x4b, 0x10, 0xb7, 0x91, 0x02, 0x3c, 0x31, 0xf5,
	0x22, 0x9f, 0x47, 0xa6, 0x2e, 0xdd, 0x54, 0x24, 0x78, 0x35, 0xed, 0xfb, 0x3c, 0xca, 0x5d, 0x85,
	0xf9, 0xa2, 0xa6, 0x21, 0x6b, 0x2a, 0x69, 0xff, 0xd2, 0x50, 0xfd, 0xaf, 0xfd, 0xd7, 0x4c, 0x6d,
	0x83, 0x89, 0x31, 0x32, 0x52, 0xc6, 0x94, 0x81, 0xaa, 0x2b, 0x63, 0xc5, 0x4c, 0x84, 0x9a, 0x57,
	0x73, 0x55, 0x82, 0x9f, 0x20, 0x34, 0x06, 0xff, 0xc6, 0x0b, 0x58, 0x46, 0x85, 0x1c, 0x67, 0xb8,
	0xe5, 0x1c, 0xe9, 0xe5, 0x00, 0xee, 0xa1, 0x7d, 0xca, 0xc2, 0xd5, 0x45, 0xba, 0xf7, 0x5f, 0xc4,
	0x1e, 0xe4, 0x7c, 0xf5, 0x76, 0x54, 0x6f, 0xf3, 0x0c, 0xa1, 0x35, 0x78, 0xdf, 0x0d, 0xaa, 0x1b,
	0x37, 0x38, 0x1f, 0xdc, 0xce, 0x2d, 0xed, 0x6e, 0x6e, 0x69, 0x3f, 0xe7, 0x96, 0xf6, 0x75, 0x61,
	0x95, 0xee, 0x16, 0x56, 0xe9, 0xdb, 0xc2, 0x2a, 0x7d, 0x7e, 0x31, 0x24, 0x22, 0xca, 0xae, 0xed,
	0x80, 0xc5, 0x4e, 0x5f, 0x7a, 0xea, 0xf6, 0x22, 0x9f, 0x50, 0x47, 0x19, 0xec, 0x06, 0x32, 0x99,
	0xae, 0x7e, 0xaf, 0x98, 0x25, 0xc0, 0xaf, 0x0f, 0xe4, 0xcf, 0x7d, 0xfe, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x58, 0x02, 0xa3, 0x61, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerkleTrees) > 0 {
		for iNdEx := len(m.MerkleTrees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MerkleTrees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UsedNullifiers) > 0 {
		for iNdEx := len(m.UsedNullifiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsedNullifiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NextDepositIndices) > 0 {
		for k := range m.NextDepositIndices {
			v := m.NextDepositIndices[k]
			baseI := i
			i = encodeVarintGenesis(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UsedNullifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsedNullifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsedNullifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpentTxHash) > 0 {
		i -= len(m.SpentTxHash)
		copy(dAtA[i:], m.SpentTxHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SpentTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SpentAtHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SpentAtHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nullifier) > 0 {
		i -= len(m.Nullifier)
		copy(dAtA[i:], m.Nullifier)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Nullifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomMerkleTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomMerkleTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomMerkleTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for k := range m.Nodes {
			v := m.Nodes[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintGenesis(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LeafCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LeafCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Depth != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NextDepositIndices) > 0 {
		for k, v := range m.NextDepositIndices {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + sovGenesis(uint64(v))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.UsedNullifiers) > 0 {
		for _, e := range m.UsedNullifiers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MerkleTrees) > 0 {
		for _, e := range m.MerkleTrees {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UsedNullifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nullifier)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.SpentAtHeight != 0 {
		n += 1 + sovGenesis(uint64(m.SpentAtHeight))
	}
	l = len(m.SpentTxHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *DenomMerkleTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Depth != 0 {
		n += 1 + sovGenesis(uint64(m.Depth))
	}
	if m.LeafCount != 0 {
		n += 1 + sovGenesis(uint64(m.LeafCount))
	}
	if len(m.Nodes) > 0 {
		for k, v := range m.Nodes {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovGenesis(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, PrivateDeposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDepositIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextDepositIndices == nil {
				m.NextDepositIndices = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NextDepositIndices[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedNullifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedNullifiers = append(m.UsedNullifiers, UsedNullifier{})
			if err := m.UsedNullifiers[len(m.UsedNullifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleTrees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleTrees = append(m.MerkleTrees, DenomMerkleTree{})
			if err := m.MerkleTrees[len(m.MerkleTrees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsedNullifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsedNullifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsedNullifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nullifier = append(m.Nullifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Nullifier == nil {
				m.Nullifier = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentAtHeight", wireType)
			}
			m.SpentAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpentAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpentTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomMerkleTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomMerkleTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomMerkleTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCount", wireType)
			}
			m.LeafCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeafCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthGenesis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Nodes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
