// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hikari/privacy/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request for querying module parameters.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response for querying module parameters.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDepositRequest requests a specific deposit by denomination and index.
type QueryDepositRequest struct {
	// Denomination of the deposit
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Index of the deposit within the denomination pool
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryDepositRequest) Reset()         { *m = QueryDepositRequest{} }
func (m *QueryDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositRequest) ProtoMessage()    {}
func (*QueryDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{2}
}
func (m *QueryDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositRequest.Merge(m, src)
}
func (m *QueryDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositRequest proto.InternalMessageInfo

func (m *QueryDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryDepositRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// QueryDepositResponse returns the requested deposit.
type QueryDepositResponse struct {
	Deposit PrivateDeposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
}

func (m *QueryDepositResponse) Reset()         { *m = QueryDepositResponse{} }
func (m *QueryDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositResponse) ProtoMessage()    {}
func (*QueryDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{3}
}
func (m *QueryDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositResponse.Merge(m, src)
}
func (m *QueryDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositResponse proto.InternalMessageInfo

func (m *QueryDepositResponse) GetDeposit() PrivateDeposit {
	if m != nil {
		return m.Deposit
	}
	return PrivateDeposit{}
}

// QueryDepositsRequest requests all deposits for a denomination.
type QueryDepositsRequest struct {
	// Denomination to query
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Pagination parameters
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositsRequest) Reset()         { *m = QueryDepositsRequest{} }
func (m *QueryDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositsRequest) ProtoMessage()    {}
func (*QueryDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{4}
}
func (m *QueryDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositsRequest.Merge(m, src)
}
func (m *QueryDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositsRequest proto.InternalMessageInfo

func (m *QueryDepositsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryDepositsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDepositsResponse returns deposits for a denomination.
type QueryDepositsResponse struct {
	Deposits   []PrivateDeposit    `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDepositsResponse) Reset()         { *m = QueryDepositsResponse{} }
func (m *QueryDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositsResponse) ProtoMessage()    {}
func (*QueryDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{5}
}
func (m *QueryDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositsResponse.Merge(m, src)
}
func (m *QueryDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositsResponse proto.InternalMessageInfo

func (m *QueryDepositsResponse) GetDeposits() []PrivateDeposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryDepositsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDepositsRequest requests deposits across all denominations.
type QueryAllDepositsRequest struct {
	// Pagination parameters
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositsRequest) Reset()         { *m = QueryAllDepositsRequest{} }
func (m *QueryAllDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositsRequest) ProtoMessage()    {}
func (*QueryAllDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{6}
}
func (m *QueryAllDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositsRequest.Merge(m, src)
}
func (m *QueryAllDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositsRequest proto.InternalMessageInfo

func (m *QueryAllDepositsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDepositsResponse returns deposits across all denominations.
type QueryAllDepositsResponse struct {
	Deposits   []PrivateDeposit    `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositsResponse) Reset()         { *m = QueryAllDepositsResponse{} }
func (m *QueryAllDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositsResponse) ProtoMessage()    {}
func (*QueryAllDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{7}
}
func (m *QueryAllDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositsResponse.Merge(m, src)
}
func (m *QueryAllDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositsResponse proto.InternalMessageInfo

func (m *QueryAllDepositsResponse) GetDeposits() []PrivateDeposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryAllDepositsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryNextDepositIndexRequest requests the next deposit index for a denomination.
type QueryNextDepositIndexRequest struct {
	// Denomination to query
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryNextDepositIndexRequest) Reset()         { *m = QueryNextDepositIndexRequest{} }
func (m *QueryNextDepositIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextDepositIndexRequest) ProtoMessage()    {}
func (*QueryNextDepositIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{8}
}
func (m *QueryNextDepositIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextDepositIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextDepositIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextDepositIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextDepositIndexRequest.Merge(m, src)
}
func (m *QueryNextDepositIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextDepositIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextDepositIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextDepositIndexRequest proto.InternalMessageInfo

func (m *QueryNextDepositIndexRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryNextDepositIndexResponse returns the next available index.
type QueryNextDepositIndexResponse struct {
	// Next available deposit index
	NextIndex uint64 `protobuf:"varint,1,opt,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty"`
	// Total number of deposits for this denomination
	TotalDeposits uint64 `protobuf:"varint,2,opt,name=total_deposits,json=totalDeposits,proto3" json:"total_deposits,omitempty"`
}

func (m *QueryNextDepositIndexResponse) Reset()         { *m = QueryNextDepositIndexResponse{} }
func (m *QueryNextDepositIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextDepositIndexResponse) ProtoMessage()    {}
func (*QueryNextDepositIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{9}
}
func (m *QueryNextDepositIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextDepositIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextDepositIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextDepositIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextDepositIndexResponse.Merge(m, src)
}
func (m *QueryNextDepositIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextDepositIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextDepositIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextDepositIndexResponse proto.InternalMessageInfo

func (m *QueryNextDepositIndexResponse) GetNextIndex() uint64 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *QueryNextDepositIndexResponse) GetTotalDeposits() uint64 {
	if m != nil {
		return m.TotalDeposits
	}
	return 0
}

// QueryIsNullifierUsedRequest checks if a nullifier has been spent.
type QueryIsNullifierUsedRequest struct {
	// Nullifier to check (hex-encoded bytes)
	Nullifier string `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
}

func (m *QueryIsNullifierUsedRequest) Reset()         { *m = QueryIsNullifierUsedRequest{} }
func (m *QueryIsNullifierUsedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsNullifierUsedRequest) ProtoMessage()    {}
func (*QueryIsNullifierUsedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{10}
}
func (m *QueryIsNullifierUsedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsNullifierUsedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsNullifierUsedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsNullifierUsedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsNullifierUsedRequest.Merge(m, src)
}
func (m *QueryIsNullifierUsedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsNullifierUsedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsNullifierUsedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsNullifierUsedRequest proto.InternalMessageInfo

func (m *QueryIsNullifierUsedRequest) GetNullifier() string {
	if m != nil {
		return m.Nullifier
	}
	return ""
}

// QueryIsNullifierUsedResponse returns whether the nullifier is used.
type QueryIsNullifierUsedResponse struct {
	// True if nullifier has been used
	Used bool `protobuf:"varint,1,opt,name=used,proto3" json:"used,omitempty"`
	// If used, the block height where it was spent
	SpentAtHeight int64 `protobuf:"varint,2,opt,name=spent_at_height,json=spentAtHeight,proto3" json:"spent_at_height,omitempty"`
	// If used, the transaction hash that spent it
	SpentTxHash string `protobuf:"bytes,3,opt,name=spent_tx_hash,json=spentTxHash,proto3" json:"spent_tx_hash,omitempty"`
}

func (m *QueryIsNullifierUsedResponse) Reset()         { *m = QueryIsNullifierUsedResponse{} }
func (m *QueryIsNullifierUsedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsNullifierUsedResponse) ProtoMessage()    {}
func (*QueryIsNullifierUsedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{11}
}
func (m *QueryIsNullifierUsedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsNullifierUsedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsNullifierUsedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsNullifierUsedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsNullifierUsedResponse.Merge(m, src)
}
func (m *QueryIsNullifierUsedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsNullifierUsedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsNullifierUsedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsNullifierUsedResponse proto.InternalMessageInfo

func (m *QueryIsNullifierUsedResponse) GetUsed() bool {
	if m != nil {
		return m.Used
	}
	return false
}

func (m *QueryIsNullifierUsedResponse) GetSpentAtHeight() int64 {
	if m != nil {
		return m.SpentAtHeight
	}
	return 0
}

func (m *QueryIsNullifierUsedResponse) GetSpentTxHash() string {
	if m != nil {
		return m.SpentTxHash
	}
	return ""
}

// QueryMerkleRootRequest requests the Merkle tree root (Phase 2).
type QueryMerkleRootRequest struct {
	// Denomination to query
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryMerkleRootRequest) Reset()         { *m = QueryMerkleRootRequest{} }
func (m *QueryMerkleRootRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleRootRequest) ProtoMessage()    {}
func (*QueryMerkleRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{12}
}
func (m *QueryMerkleRootRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleRootRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleRootRequest.Merge(m, src)
}
func (m *QueryMerkleRootRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleRootRequest proto.InternalMessageInfo

func (m *QueryMerkleRootRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryMerkleRootResponse returns the current Merkle root.
type QueryMerkleRootResponse struct {
	// Current Merkle tree root
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Tree depth
	Depth uint32 `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	// Number of leaves in the tree
	LeafCount uint64 `protobuf:"varint,3,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
}

func (m *QueryMerkleRootResponse) Reset()         { *m = QueryMerkleRootResponse{} }
func (m *QueryMerkleRootResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMerkleRootResponse) ProtoMessage()    {}
func (*QueryMerkleRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{13}
}
func (m *QueryMerkleRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkleRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkleRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkleRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkleRootResponse.Merge(m, src)
}
func (m *QueryMerkleRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkleRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkleRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkleRootResponse proto.InternalMessageInfo

func (m *QueryMerkleRootResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *QueryMerkleRootResponse) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *QueryMerkleRootResponse) GetLeafCount() uint64 {
	if m != nil {
		return m.LeafCount
	}
	return 0
}

// QueryMerklePathRequest requests a Merkle proof for a specific leaf.
type QueryMerklePathRequest struct {
	// Denomination to query
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Leaf index
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryMerklePathRequest) Reset()         { *m = QueryMerklePathRequest{} }
func (m *QueryMerklePathRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMerklePathRequest) ProtoMessage()    {}
func (*QueryMerklePathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{14}
}
func (m *QueryMerklePathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerklePathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerklePathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerklePathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerklePathRequest.Merge(m, src)
}
func (m *QueryMerklePathRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerklePathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerklePathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerklePathRequest proto.InternalMessageInfo

func (m *QueryMerklePathRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryMerklePathRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// QueryMerklePathResponse returns the Merkle path.
type QueryMerklePathResponse struct {
	Proof MerkleProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof"`
}

func (m *QueryMerklePathResponse) Reset()         { *m = QueryMerklePathResponse{} }
func (m *QueryMerklePathResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMerklePathResponse) ProtoMessage()    {}
func (*QueryMerklePathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{15}
}
func (m *QueryMerklePathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerklePathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerklePathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerklePathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerklePathResponse.Merge(m, src)
}
func (m *QueryMerklePathResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerklePathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerklePathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerklePathResponse proto.InternalMessageInfo

func (m *QueryMerklePathResponse) GetProof() MerkleProof {
	if m != nil {
		return m.Proof
	}
	return MerkleProof{}
}

// QueryDepositsByRangeRequest requests deposits within an index range.
type QueryDepositsByRangeRequest struct {
	// Denomination to query
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Start index (inclusive)
	StartIndex uint64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// End index (exclusive)
	EndIndex uint64 `protobuf:"varint,3,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (m *QueryDepositsByRangeRequest) Reset()         { *m = QueryDepositsByRangeRequest{} }
func (m *QueryDepositsByRangeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositsByRangeRequest) ProtoMessage()    {}
func (*QueryDepositsByRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{16}
}
func (m *QueryDepositsByRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositsByRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositsByRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositsByRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositsByRangeRequest.Merge(m, src)
}
func (m *QueryDepositsByRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositsByRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositsByRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositsByRangeRequest proto.InternalMessageInfo

func (m *QueryDepositsByRangeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryDepositsByRangeRequest) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *QueryDepositsByRangeRequest) GetEndIndex() uint64 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

// QueryDepositsByRangeResponse returns deposits in the range.
type QueryDepositsByRangeResponse struct {
	Deposits []PrivateDeposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits"`
	// Actual range returned (may be capped by server limits)
	StartIndex uint64 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex   uint64 `protobuf:"varint,3,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (m *QueryDepositsByRangeResponse) Reset()         { *m = QueryDepositsByRangeResponse{} }
func (m *QueryDepositsByRangeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositsByRangeResponse) ProtoMessage()    {}
func (*QueryDepositsByRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{17}
}
func (m *QueryDepositsByRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositsByRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositsByRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositsByRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositsByRangeResponse.Merge(m, src)
}
func (m *QueryDepositsByRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositsByRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositsByRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositsByRangeResponse proto.InternalMessageInfo

func (m *QueryDepositsByRangeResponse) GetDeposits() []PrivateDeposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryDepositsByRangeResponse) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *QueryDepositsByRangeResponse) GetEndIndex() uint64 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

// QueryStatsRequest requests privacy pool statistics.
type QueryStatsRequest struct {
}

func (m *QueryStatsRequest) Reset()         { *m = QueryStatsRequest{} }
func (m *QueryStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStatsRequest) ProtoMessage()    {}
func (*QueryStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{18}
}
func (m *QueryStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsRequest.Merge(m, src)
}
func (m *QueryStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsRequest proto.InternalMessageInfo

// QueryStatsResponse returns privacy pool statistics.
type QueryStatsResponse struct {
	// Total number of deposits across all denominations
	TotalDeposits uint64 `protobuf:"varint,1,opt,name=total_deposits,json=totalDeposits,proto3" json:"total_deposits,omitempty"`
	// Total number of spent deposits
	TotalSpent uint64 `protobuf:"varint,2,opt,name=total_spent,json=totalSpent,proto3" json:"total_spent,omitempty"`
	// Number of active (unspent) deposits
	ActiveDeposits uint64 `protobuf:"varint,3,opt,name=active_deposits,json=activeDeposits,proto3" json:"active_deposits,omitempty"`
	// Per-denomination statistics
	DenomStats []DenomStats `protobuf:"bytes,4,rep,name=denom_stats,json=denomStats,proto3" json:"denom_stats"`
	// Current phase ("phase1" or "phase2")
	Phase string `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (m *QueryStatsResponse) Reset()         { *m = QueryStatsResponse{} }
func (m *QueryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse) ProtoMessage()    {}
func (*QueryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{19}
}
func (m *QueryStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse.Merge(m, src)
}
func (m *QueryStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse proto.InternalMessageInfo

func (m *QueryStatsResponse) GetTotalDeposits() uint64 {
	if m != nil {
		return m.TotalDeposits
	}
	return 0
}

func (m *QueryStatsResponse) GetTotalSpent() uint64 {
	if m != nil {
		return m.TotalSpent
	}
	return 0
}

func (m *QueryStatsResponse) GetActiveDeposits() uint64 {
	if m != nil {
		return m.ActiveDeposits
	}
	return 0
}

func (m *QueryStatsResponse) GetDenomStats() []DenomStats {
	if m != nil {
		return m.DenomStats
	}
	return nil
}

func (m *QueryStatsResponse) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

// DenomStats contains statistics for a single denomination.
type DenomStats struct {
	// Denomination
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Total deposits for this denom
	TotalDeposits uint64 `protobuf:"varint,2,opt,name=total_deposits,json=totalDeposits,proto3" json:"total_deposits,omitempty"`
	// Active (unspent) deposits
	ActiveDeposits uint64 `protobuf:"varint,3,opt,name=active_deposits,json=activeDeposits,proto3" json:"active_deposits,omitempty"`
	// Total value locked (sum of all active deposits)
	// Note: This is only available if amounts are not fully hidden
	TotalValueLocked string `protobuf:"bytes,4,opt,name=total_value_locked,json=totalValueLocked,proto3" json:"total_value_locked,omitempty"`
	// Merkle tree root (Phase 2 only)
	MerkleRoot []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *DenomStats) Reset()         { *m = DenomStats{} }
func (m *DenomStats) String() string { return proto.CompactTextString(m) }
func (*DenomStats) ProtoMessage()    {}
func (*DenomStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_175c7c68c31daea6, []int{20}
}
func (m *DenomStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomStats.Merge(m, src)
}
func (m *DenomStats) XXX_Size() int {
	return m.Size()
}
func (m *DenomStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomStats.DiscardUnknown(m)
}

var xxx_messageInfo_DenomStats proto.InternalMessageInfo

func (m *DenomStats) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomStats) GetTotalDeposits() uint64 {
	if m != nil {
		return m.TotalDeposits
	}
	return 0
}

func (m *DenomStats) GetActiveDeposits() uint64 {
	if m != nil {
		return m.ActiveDeposits
	}
	return 0
}

func (m *DenomStats) GetTotalValueLocked() string {
	if m != nil {
		return m.TotalValueLocked
	}
	return ""
}

func (m *DenomStats) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "hikari.privacy.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hikari.privacy.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDepositRequest)(nil), "hikari.privacy.v1.QueryDepositRequest")
	proto.RegisterType((*QueryDepositResponse)(nil), "hikari.privacy.v1.QueryDepositResponse")
	proto.RegisterType((*QueryDepositsRequest)(nil), "hikari.privacy.v1.QueryDepositsRequest")
	proto.RegisterType((*QueryDepositsResponse)(nil), "hikari.privacy.v1.QueryDepositsResponse")
	proto.RegisterType((*QueryAllDepositsRequest)(nil), "hikari.privacy.v1.QueryAllDepositsRequest")
	proto.RegisterType((*QueryAllDepositsResponse)(nil), "hikari.privacy.v1.QueryAllDepositsResponse")
	proto.RegisterType((*QueryNextDepositIndexRequest)(nil), "hikari.privacy.v1.QueryNextDepositIndexRequest")
	proto.RegisterType((*QueryNextDepositIndexResponse)(nil), "hikari.privacy.v1.QueryNextDepositIndexResponse")
	proto.RegisterType((*QueryIsNullifierUsedRequest)(nil), "hikari.privacy.v1.QueryIsNullifierUsedRequest")
	proto.RegisterType((*QueryIsNullifierUsedResponse)(nil), "hikari.privacy.v1.QueryIsNullifierUsedResponse")
	proto.RegisterType((*QueryMerkleRootRequest)(nil), "hikari.privacy.v1.QueryMerkleRootRequest")
	proto.RegisterType((*QueryMerkleRootResponse)(nil), "hikari.privacy.v1.QueryMerkleRootResponse")
	proto.RegisterType((*QueryMerklePathRequest)(nil), "hikari.privacy.v1.QueryMerklePathRequest")
	proto.RegisterType((*QueryMerklePathResponse)(nil), "hikari.privacy.v1.QueryMerklePathResponse")
	proto.RegisterType((*QueryDepositsByRangeRequest)(nil), "hikari.privacy.v1.QueryDepositsByRangeRequest")
	proto.RegisterType((*QueryDepositsByRangeResponse)(nil), "hikari.privacy.v1.QueryDepositsByRangeResponse")
	proto.RegisterType((*QueryStatsRequest)(nil), "hikari.privacy.v1.QueryStatsRequest")
	proto.RegisterType((*QueryStatsResponse)(nil), "hikari.privacy.v1.QueryStatsResponse")
	proto.RegisterType((*DenomStats)(nil), "hikari.privacy.v1.DenomStats")
}

func init() { proto.RegisterFile("hikari/privacy/v1/query.proto", fileDescriptor_175c7c68c31daea6) }

var fileDescriptor_175c7c68c31daea6 = []byte{
	// 1254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xc0, 0xeb, 0xdd, 0xa4, 0xdb, 0xbe, 0x7c, 0xdb, 0x6e, 0x67, 0xfb, 0x85, 0x34, 0x6d, 0xd3,
	0xae, 0x97, 0xfe, 0xa0, 0x55, 0xed, 0xb6, 0xbb, 0x02, 0x09, 0xb8, 0xf4, 0x07, 0xd0, 0x0a, 0xa8,
	0x8a, 0x97, 0x45, 0x82, 0x4b, 0x34, 0x4d, 0xa6, 0xb1, 0xd5, 0xc4, 0xe3, 0xc6, 0x93, 0x28, 0xa5,
	0x2a, 0x07, 0x8e, 0x70, 0x00, 0x69, 0x8f, 0x9c, 0x90, 0x16, 0x89, 0x3f, 0x80, 0x3b, 0xd7, 0x3d,
	0x2e, 0x70, 0xe1, 0x84, 0xa0, 0xe5, 0xc8, 0x1f, 0x81, 0xfc, 0x66, 0xec, 0x24, 0x8d, 0xdd, 0x84,
	0x85, 0x03, 0x97, 0xc8, 0xf3, 0xfc, 0x7e, 0x7c, 0xe6, 0xbd, 0x37, 0xf3, 0x1c, 0x98, 0xb1, 0x9d,
	0x63, 0x5a, 0x73, 0x4c, 0xaf, 0xe6, 0x34, 0x68, 0xf1, 0xd4, 0x6c, 0xac, 0x9b, 0x27, 0x75, 0x56,
	0x3b, 0x35, 0xbc, 0x1a, 0x17, 0x9c, 0x8c, 0xcb, 0xd7, 0x86, 0x7a, 0x6d, 0x34, 0xd6, 0x73, 0x93,
	0x45, 0xee, 0x57, 0xb9, 0x5f, 0x40, 0x05, 0x53, 0x2e, 0xa4, 0x76, 0x6e, 0xa2, 0xcc, 0xcb, 0x5c,
	0xca, 0x83, 0x27, 0x25, 0x9d, 0x2e, 0x73, 0x5e, 0xae, 0x30, 0x93, 0x7a, 0x8e, 0x49, 0x5d, 0x97,
	0x0b, 0x2a, 0x1c, 0xee, 0x86, 0x36, 0xcb, 0xd2, 0x83, 0x79, 0x48, 0x7d, 0x26, 0x43, 0x9b, 0x8d,
	0xf5, 0x43, 0x26, 0xe8, 0xba, 0xe9, 0xd1, 0xb2, 0xe3, 0xa2, 0xb2, 0xd2, 0x1d, 0xa7, 0x55, 0xc7,
	0xe5, 0x26, 0xfe, 0x2a, 0x51, 0xbe, 0x9b, 0xdf, 0xa3, 0x35, 0x5a, 0x0d, 0xdd, 0xcf, 0xc6, 0xbc,
	0x57, 0x7b, 0x41, 0x05, 0x7d, 0x02, 0xc8, 0xfb, 0x41, 0xd4, 0x03, 0xb4, 0xb2, 0xd8, 0x49, 0x9d,
	0xf9, 0x42, 0xdf, 0x87, 0x3b, 0x1d, 0x52, 0xdf, 0xe3, 0xae, 0xcf, 0xc8, 0xab, 0x30, 0x28, 0xbd,
	0x67, 0xb5, 0x39, 0x6d, 0x29, 0xb3, 0x31, 0x69, 0x74, 0xe5, 0xc7, 0x90, 0x26, 0x5b, 0xa9, 0xa7,
	0xbf, 0xce, 0x0e, 0x58, 0x4a, 0x5d, 0xdf, 0x54, 0xfe, 0x76, 0x98, 0xc7, 0x7d, 0x47, 0xa8, 0x30,
	0x64, 0x02, 0xd2, 0x25, 0xe6, 0xf2, 0x2a, 0xba, 0x1b, 0xb6, 0xe4, 0x22, 0x90, 0x3a, 0x6e, 0x89,
	0x35, 0xb3, 0x37, 0xe6, 0xb4, 0xa5, 0x94, 0x25, 0x17, 0xfa, 0x47, 0x30, 0xd1, 0xe9, 0x42, 0x31,
	0x6d, 0xc2, 0xad, 0x92, 0x14, 0x29, 0xa8, 0xbb, 0x71, 0x50, 0xc1, 0xa3, 0x60, 0xca, 0x56, 0xc1,
	0x85, 0x76, 0xba, 0xe8, 0x74, 0xed, 0x5f, 0x8f, 0xf7, 0x16, 0x40, 0xab, 0x32, 0xc8, 0x98, 0xd9,
	0x58, 0x30, 0x54, 0x23, 0x04, 0x65, 0x34, 0x64, 0x07, 0xa9, 0x32, 0x1a, 0x07, 0xb4, 0xcc, 0x94,
	0x47, 0xab, 0xcd, 0x52, 0xff, 0x56, 0x83, 0xff, 0x5f, 0x09, 0xab, 0xb6, 0xb4, 0x0d, 0x43, 0x0a,
	0x2d, 0x48, 0xf4, 0xcd, 0xbf, 0xb3, 0xa7, 0xc8, 0x90, 0xbc, 0x1d, 0x83, 0xb9, 0xd8, 0x13, 0x53,
	0x12, 0x74, 0x70, 0x52, 0x78, 0x11, 0x31, 0x37, 0x2b, 0x95, 0xab, 0x09, 0xea, 0x4c, 0x85, 0xf6,
	0xdc, 0xa9, 0xf8, 0x4e, 0x83, 0x6c, 0x77, 0x8c, 0xff, 0x64, 0x36, 0x1e, 0xc0, 0x34, 0x92, 0xee,
	0xb3, 0xa6, 0x50, 0xc1, 0xf6, 0x82, 0xfe, 0xbc, 0xb6, 0x67, 0x74, 0x06, 0x33, 0x09, 0x56, 0x6a,
	0x93, 0x33, 0x00, 0x2e, 0x6b, 0x8a, 0x82, 0x6c, 0x7c, 0x0d, 0x1b, 0x7f, 0x38, 0x90, 0xa0, 0x1a,
	0x99, 0x87, 0x51, 0xc1, 0x05, 0xad, 0x14, 0xa2, 0x4c, 0xc8, 0xb3, 0x31, 0x82, 0xd2, 0x30, 0x65,
	0xfa, 0xeb, 0x30, 0x85, 0x61, 0xf6, 0xfc, 0xfd, 0x7a, 0xa5, 0xe2, 0x1c, 0x39, 0xac, 0xf6, 0xc8,
	0x67, 0xa5, 0x90, 0x6d, 0x1a, 0x86, 0xdd, 0x50, 0xae, 0xf8, 0x5a, 0x02, 0xfd, 0x53, 0xb5, 0xb3,
	0x2e, 0x63, 0x85, 0x48, 0x20, 0x55, 0xf7, 0x59, 0x09, 0x0d, 0x87, 0x2c, 0x7c, 0x26, 0x0b, 0x30,
	0xe6, 0x7b, 0xcc, 0x15, 0x05, 0x2a, 0x0a, 0x36, 0x73, 0xca, 0xb6, 0x40, 0xb0, 0x9b, 0xd6, 0x08,
	0x8a, 0x37, 0xc5, 0x2e, 0x0a, 0x89, 0x0e, 0x52, 0x50, 0x10, 0xcd, 0x82, 0x4d, 0x7d, 0x3b, 0x7b,
	0x13, 0xa3, 0x67, 0x50, 0xf8, 0x41, 0x73, 0x97, 0xfa, 0xb6, 0x6e, 0xc0, 0x0b, 0x18, 0xff, 0x3d,
	0x56, 0x3b, 0xae, 0x30, 0x8b, 0xf3, 0xeb, 0xaf, 0x09, 0xfd, 0x50, 0xf5, 0x65, 0xbb, 0x7e, 0x0b,
	0xb5, 0xc6, 0xb9, 0xbc, 0x10, 0xfe, 0x67, 0xe1, 0xb3, 0x74, 0xe2, 0x09, 0x1b, 0x01, 0x47, 0x2c,
	0xb9, 0x08, 0xf2, 0x5e, 0x61, 0xf4, 0xa8, 0x50, 0xe4, 0x75, 0x57, 0x20, 0x55, 0xca, 0x1a, 0x0e,
	0x24, 0xdb, 0x81, 0x40, 0xdf, 0xe9, 0x60, 0x3a, 0xa0, 0xc2, 0x7e, 0x9e, 0xab, 0xeb, 0x51, 0x07,
	0xa9, 0xf4, 0xa2, 0x48, 0x5f, 0x83, 0xb4, 0x57, 0xe3, 0xfc, 0x48, 0x1d, 0x9e, 0x7c, 0x4c, 0x67,
	0x2b, 0xab, 0x40, 0x4b, 0xb5, 0xb5, 0x34, 0xd1, 0x4f, 0x54, 0xb5, 0xc3, 0xf2, 0x6f, 0x9d, 0x5a,
	0xd4, 0x8d, 0x0e, 0x58, 0x02, 0xe1, 0x2c, 0x64, 0x7c, 0x41, 0x6b, 0x61, 0xa7, 0x49, 0x4e, 0x40,
	0x91, 0x6c, 0xb5, 0x29, 0x18, 0x66, 0x6e, 0x49, 0xbd, 0x96, 0x09, 0x19, 0x62, 0x6e, 0x09, 0x5f,
	0xea, 0xdf, 0x68, 0xaa, 0x49, 0xba, 0x62, 0xfe, 0x9b, 0x87, 0xf5, 0x9f, 0x31, 0xde, 0x81, 0x71,
	0x44, 0x7c, 0x28, 0x68, 0x74, 0x53, 0xe9, 0xbf, 0x6b, 0x6a, 0xce, 0x29, 0xa9, 0xc2, 0xed, 0x3e,
	0x57, 0x5a, 0xcc, 0xb9, 0x0a, 0x80, 0xa4, 0x1a, 0xf6, 0x6b, 0x08, 0x84, 0xa2, 0x87, 0x81, 0x84,
	0x2c, 0xc2, 0x18, 0x2d, 0x0a, 0xa7, 0xc1, 0x5a, 0x8e, 0x24, 0xd6, 0xa8, 0x14, 0x47, 0x9e, 0x76,
	0x20, 0x83, 0x75, 0x28, 0xf8, 0x01, 0x47, 0x36, 0x85, 0x29, 0x9a, 0x89, 0x49, 0xd1, 0x4e, 0xa0,
	0x85, 0xb0, 0x2a, 0x3d, 0x50, 0x8a, 0x24, 0x41, 0x69, 0x3d, 0x9b, 0xfa, 0x2c, 0x9b, 0x96, 0xa5,
	0xc5, 0x85, 0xfe, 0xa3, 0x06, 0xb0, 0xd3, 0xa1, 0x14, 0x53, 0xff, 0xfe, 0x6e, 0x92, 0xfe, 0x37,
	0xf4, 0x06, 0x10, 0xe9, 0xaf, 0x41, 0x2b, 0x75, 0x56, 0xa8, 0xf0, 0xe2, 0x31, 0x2b, 0x65, 0x53,
	0x41, 0xc8, 0xad, 0xd1, 0x9f, 0xbe, 0x5f, 0x05, 0x75, 0xc7, 0xee, 0xb9, 0xc2, 0xba, 0x8d, 0x9a,
	0x1f, 0x06, 0x8a, 0xef, 0xa2, 0x5e, 0x90, 0xd8, 0x2a, 0xb6, 0x77, 0x01, 0xcf, 0x6b, 0x1a, 0xcf,
	0x2b, 0x54, 0xa3, 0x13, 0xbd, 0xf1, 0x67, 0x06, 0xd2, 0x58, 0x37, 0xf2, 0x09, 0x0c, 0xca, 0x4f,
	0x0b, 0x32, 0x1f, 0x93, 0xae, 0xee, 0x6f, 0x98, 0xdc, 0x42, 0x2f, 0x35, 0xd9, 0x03, 0xfa, 0xdd,
	0xcf, 0x7e, 0xfe, 0xe3, 0xf1, 0x8d, 0x29, 0x32, 0x69, 0x26, 0x7d, 0x4b, 0x91, 0x2f, 0x35, 0xb8,
	0xa5, 0x76, 0x4c, 0x12, 0xdd, 0x76, 0x7e, 0xdb, 0xe4, 0x16, 0x7b, 0xea, 0xa9, 0xf8, 0xf7, 0x31,
	0xfe, 0x2a, 0x59, 0x89, 0x89, 0x1f, 0x26, 0xdf, 0x3c, 0xc3, 0xea, 0x9d, 0x9b, 0x67, 0xd8, 0xf3,
	0xe7, 0xe4, 0x73, 0x0d, 0x86, 0x5a, 0xc5, 0xea, 0x11, 0x2a, 0x4a, 0xc9, 0x52, 0x6f, 0x45, 0x05,
	0xb5, 0x82, 0x50, 0xf3, 0xe4, 0x5e, 0x1f, 0x50, 0xe4, 0x0b, 0x0d, 0x32, 0x6d, 0x93, 0x9b, 0x2c,
	0x27, 0x85, 0xe9, 0xfe, 0x84, 0xc8, 0xad, 0xf4, 0xa5, 0xab, 0xa8, 0xee, 0x21, 0xd5, 0x0c, 0x99,
	0xba, 0x86, 0x8a, 0x3c, 0xd1, 0xe0, 0xf6, 0xd5, 0x39, 0x4b, 0xcc, 0xa4, 0x30, 0x09, 0x73, 0x3c,
	0xb7, 0xd6, 0xbf, 0x81, 0x82, 0x5b, 0x45, 0xb8, 0x45, 0x32, 0x1f, 0x03, 0xd7, 0x9a, 0xed, 0x51,
	0xd2, 0x9e, 0x68, 0x30, 0x76, 0x65, 0xd4, 0x12, 0x23, 0x29, 0x68, 0xfc, 0x40, 0xcf, 0x99, 0x7d,
	0xeb, 0x2b, 0xc6, 0x35, 0x64, 0x5c, 0x26, 0x4b, 0x71, 0x8c, 0xa1, 0x85, 0x79, 0x16, 0x3d, 0x9e,
	0x93, 0xc7, 0x1a, 0x40, 0x6b, 0xc2, 0x92, 0x97, 0x93, 0x22, 0x76, 0x4d, 0xed, 0xdc, 0x72, 0x3f,
	0xaa, 0x8a, 0xcb, 0x40, 0xae, 0x25, 0xb2, 0x10, 0xc3, 0xd5, 0x76, 0x41, 0x44, 0xc9, 0xfb, 0x3a,
	0xa2, 0x0a, 0xa6, 0x69, 0x2f, 0xaa, 0xb6, 0xb9, 0xdd, 0x8b, 0xaa, 0x7d, 0x38, 0xeb, 0xaf, 0x20,
	0xd5, 0x1a, 0x31, 0x92, 0xa9, 0x3c, 0x2a, 0xec, 0xae, 0xc3, 0xf9, 0x83, 0x06, 0x63, 0x57, 0x06,
	0x64, 0x72, 0x69, 0xe3, 0xa7, 0x77, 0x72, 0x69, 0x13, 0x26, 0xaf, 0xfe, 0x0e, 0xc2, 0xbe, 0x49,
	0xb6, 0xfb, 0xb9, 0x46, 0x6a, 0x81, 0xa9, 0x79, 0xd6, 0x36, 0x65, 0xcf, 0xcd, 0xb3, 0x68, 0xa4,
	0x9e, 0x93, 0x06, 0xa4, 0xe5, 0x10, 0x79, 0x29, 0x09, 0xa3, 0x7d, 0xba, 0xe6, 0xe6, 0x7b, 0x68,
	0x29, 0xc4, 0x39, 0x44, 0xcc, 0x91, 0x6c, 0x0c, 0x22, 0xce, 0xc3, 0xad, 0xfd, 0xa7, 0x17, 0x79,
	0xed, 0xd9, 0x45, 0x5e, 0xfb, 0xed, 0x22, 0xaf, 0x7d, 0x75, 0x99, 0x1f, 0x78, 0x76, 0x99, 0x1f,
	0xf8, 0xe5, 0x32, 0x3f, 0xf0, 0xf1, 0x83, 0xb2, 0x23, 0xec, 0xfa, 0xa1, 0x51, 0xe4, 0x55, 0x73,
	0x17, 0xad, 0x57, 0xb7, 0x6d, 0xea, 0xb8, 0xca, 0xd5, 0x6a, 0x11, 0x17, 0xcd, 0xc8, 0xa5, 0x38,
	0xf5, 0x98, 0x7f, 0x38, 0x88, 0x7f, 0x72, 0xef, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x79,
	0x2c, 0x05, 0xe7, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the current privacy module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Deposit returns a specific private deposit by denomination and index.
	Deposit(ctx context.Context, in *QueryDepositRequest, opts ...grpc.CallOption) (*QueryDepositResponse, error)
	// Deposits returns all deposits for a specific denomination with pagination.
	Deposits(ctx context.Context, in *QueryDepositsRequest, opts ...grpc.CallOption) (*QueryDepositsResponse, error)
	// AllDeposits returns deposits across all denominations with pagination.
	AllDeposits(ctx context.Context, in *QueryAllDepositsRequest, opts ...grpc.CallOption) (*QueryAllDepositsResponse, error)
	// NextDepositIndex returns the next available deposit index for a denomination.
	NextDepositIndex(ctx context.Context, in *QueryNextDepositIndexRequest, opts ...grpc.CallOption) (*QueryNextDepositIndexResponse, error)
	// IsNullifierUsed checks if a nullifier has been used.
	IsNullifierUsed(ctx context.Context, in *QueryIsNullifierUsedRequest, opts ...grpc.CallOption) (*QueryIsNullifierUsedResponse, error)
	// MerkleRoot returns the current Merkle tree root for a denomination (Phase 2).
	MerkleRoot(ctx context.Context, in *QueryMerkleRootRequest, opts ...grpc.CallOption) (*QueryMerkleRootResponse, error)
	// MerklePath returns the Merkle path for a specific leaf (Phase 2).
	MerklePath(ctx context.Context, in *QueryMerklePathRequest, opts ...grpc.CallOption) (*QueryMerklePathResponse, error)
	// DepositsByRange returns deposits within a specific index range.
	// This is useful for clients scanning for their deposits.
	DepositsByRange(ctx context.Context, in *QueryDepositsByRangeRequest, opts ...grpc.CallOption) (*QueryDepositsByRangeResponse, error)
	// Stats returns statistics about the privacy pool.
	Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deposit(ctx context.Context, in *QueryDepositRequest, opts ...grpc.CallOption) (*QueryDepositResponse, error) {
	out := new(QueryDepositResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deposits(ctx context.Context, in *QueryDepositsRequest, opts ...grpc.CallOption) (*QueryDepositsResponse, error) {
	out := new(QueryDepositsResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDeposits(ctx context.Context, in *QueryAllDepositsRequest, opts ...grpc.CallOption) (*QueryAllDepositsResponse, error) {
	out := new(QueryAllDepositsResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/AllDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextDepositIndex(ctx context.Context, in *QueryNextDepositIndexRequest, opts ...grpc.CallOption) (*QueryNextDepositIndexResponse, error) {
	out := new(QueryNextDepositIndexResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/NextDepositIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsNullifierUsed(ctx context.Context, in *QueryIsNullifierUsedRequest, opts ...grpc.CallOption) (*QueryIsNullifierUsedResponse, error) {
	out := new(QueryIsNullifierUsedResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/IsNullifierUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MerkleRoot(ctx context.Context, in *QueryMerkleRootRequest, opts ...grpc.CallOption) (*QueryMerkleRootResponse, error) {
	out := new(QueryMerkleRootResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/MerkleRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MerklePath(ctx context.Context, in *QueryMerklePathRequest, opts ...grpc.CallOption) (*QueryMerklePathResponse, error) {
	out := new(QueryMerklePathResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/MerklePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositsByRange(ctx context.Context, in *QueryDepositsByRangeRequest, opts ...grpc.CallOption) (*QueryDepositsByRangeResponse, error) {
	out := new(QueryDepositsByRangeResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/DepositsByRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, "/hikari.privacy.v1.Query/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the current privacy module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Deposit returns a specific private deposit by denomination and index.
	Deposit(context.Context, *QueryDepositRequest) (*QueryDepositResponse, error)
	// Deposits returns all deposits for a specific denomination with pagination.
	Deposits(context.Context, *QueryDepositsRequest) (*QueryDepositsResponse, error)
	// AllDeposits returns deposits across all denominations with pagination.
	AllDeposits(context.Context, *QueryAllDepositsRequest) (*QueryAllDepositsResponse, error)
	// NextDepositIndex returns the next available deposit index for a denomination.
	NextDepositIndex(context.Context, *QueryNextDepositIndexRequest) (*QueryNextDepositIndexResponse, error)
	// IsNullifierUsed checks if a nullifier has been used.
	IsNullifierUsed(context.Context, *QueryIsNullifierUsedRequest) (*QueryIsNullifierUsedResponse, error)
	// MerkleRoot returns the current Merkle tree root for a denomination (Phase 2).
	MerkleRoot(context.Context, *QueryMerkleRootRequest) (*QueryMerkleRootResponse, error)
	// MerklePath returns the Merkle path for a specific leaf (Phase 2).
	MerklePath(context.Context, *QueryMerklePathRequest) (*QueryMerklePathResponse, error)
	// DepositsByRange returns deposits within a specific index range.
	// This is useful for clients scanning for their deposits.
	DepositsByRange(context.Context, *QueryDepositsByRangeRequest) (*QueryDepositsByRangeResponse, error)
	// Stats returns statistics about the privacy pool.
	Stats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Deposit(ctx context.Context, req *QueryDepositRequest) (*QueryDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedQueryServer) Deposits(ctx context.Context, req *QueryDepositsRequest) (*QueryDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (*UnimplementedQueryServer) AllDeposits(ctx context.Context, req *QueryAllDepositsRequest) (*QueryAllDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDeposits not implemented")
}
func (*UnimplementedQueryServer) NextDepositIndex(ctx context.Context, req *QueryNextDepositIndexRequest) (*QueryNextDepositIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDepositIndex not implemented")
}
func (*UnimplementedQueryServer) IsNullifierUsed(ctx context.Context, req *QueryIsNullifierUsedRequest) (*QueryIsNullifierUsedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNullifierUsed not implemented")
}
func (*UnimplementedQueryServer) MerkleRoot(ctx context.Context, req *QueryMerkleRootRequest) (*QueryMerkleRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerkleRoot not implemented")
}
func (*UnimplementedQueryServer) MerklePath(ctx context.Context, req *QueryMerklePathRequest) (*QueryMerklePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerklePath not implemented")
}
func (*UnimplementedQueryServer) DepositsByRange(ctx context.Context, req *QueryDepositsByRangeRequest) (*QueryDepositsByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositsByRange not implemented")
}
func (*UnimplementedQueryServer) Stats(ctx context.Context, req *QueryStatsRequest) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deposit(ctx, req.(*QueryDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deposits(ctx, req.(*QueryDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/AllDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDeposits(ctx, req.(*QueryAllDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextDepositIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextDepositIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextDepositIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/NextDepositIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextDepositIndex(ctx, req.(*QueryNextDepositIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsNullifierUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsNullifierUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsNullifierUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/IsNullifierUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsNullifierUsed(ctx, req.(*QueryIsNullifierUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMerkleRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/MerkleRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MerkleRoot(ctx, req.(*QueryMerkleRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MerklePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMerklePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MerklePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/MerklePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MerklePath(ctx, req.(*QueryMerklePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositsByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositsByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositsByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/DepositsByRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositsByRange(ctx, req.(*QueryDepositsByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hikari.privacy.v1.Query/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hikari.privacy.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Query_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _Query_Deposits_Handler,
		},
		{
			MethodName: "AllDeposits",
			Handler:    _Query_AllDeposits_Handler,
		},
		{
			MethodName: "NextDepositIndex",
			Handler:    _Query_NextDepositIndex_Handler,
		},
		{
			MethodName: "IsNullifierUsed",
			Handler:    _Query_IsNullifierUsed_Handler,
		},
		{
			MethodName: "MerkleRoot",
			Handler:    _Query_MerkleRoot_Handler,
		},
		{
			MethodName: "MerklePath",
			Handler:    _Query_MerklePath_Handler,
		},
		{
			MethodName: "DepositsByRange",
			Handler:    _Query_DepositsByRange_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hikari/privacy/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextDepositIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextDepositIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextDepositIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextDepositIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextDepositIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextDepositIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDeposits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDeposits))
		i--
		dAtA[i] = 0x10
	}
	if m.NextIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsNullifierUsedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsNullifierUsedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsNullifierUsedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nullifier) > 0 {
		i -= len(m.Nullifier)
		copy(dAtA[i:], m.Nullifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Nullifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsNullifierUsedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsNullifierUsedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsNullifierUsedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpentTxHash) > 0 {
		i -= len(m.SpentTxHash)
		copy(dAtA[i:], m.SpentTxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpentTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SpentAtHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpentAtHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Used {
		i--
		if m.Used {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleRootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleRootRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleRootRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkleRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkleRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkleRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeafCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LeafCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Depth != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerklePathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerklePathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerklePathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerklePathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerklePathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerklePathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDepositsByRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositsByRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositsByRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositsByRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositsByRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositsByRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phase) > 0 {
		i -= len(m.Phase)
		copy(dAtA[i:], m.Phase)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Phase)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DenomStats) > 0 {
		for iNdEx := len(m.DenomStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ActiveDeposits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveDeposits))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalSpent != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalSpent))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalDeposits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDeposits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DenomStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalValueLocked) > 0 {
		i -= len(m.TotalValueLocked)
		copy(dAtA[i:], m.TotalValueLocked)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalValueLocked)))
		i--
		dAtA[i] = 0x22
	}
	if m.ActiveDeposits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveDeposits))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalDeposits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDeposits))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextDepositIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextDepositIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextIndex != 0 {
		n += 1 + sovQuery(uint64(m.NextIndex))
	}
	if m.TotalDeposits != 0 {
		n += 1 + sovQuery(uint64(m.TotalDeposits))
	}
	return n
}

func (m *QueryIsNullifierUsedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nullifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsNullifierUsedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Used {
		n += 2
	}
	if m.SpentAtHeight != 0 {
		n += 1 + sovQuery(uint64(m.SpentAtHeight))
	}
	l = len(m.SpentTxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMerkleRootRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMerkleRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Depth != 0 {
		n += 1 + sovQuery(uint64(m.Depth))
	}
	if m.LeafCount != 0 {
		n += 1 + sovQuery(uint64(m.LeafCount))
	}
	return n
}

func (m *QueryMerklePathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryMerklePathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositsByRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartIndex != 0 {
		n += 1 + sovQuery(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovQuery(uint64(m.EndIndex))
	}
	return n
}

func (m *QueryDepositsByRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StartIndex != 0 {
		n += 1 + sovQuery(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovQuery(uint64(m.EndIndex))
	}
	return n
}

func (m *QueryStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeposits != 0 {
		n += 1 + sovQuery(uint64(m.TotalDeposits))
	}
	if m.TotalSpent != 0 {
		n += 1 + sovQuery(uint64(m.TotalSpent))
	}
	if m.ActiveDeposits != 0 {
		n += 1 + sovQuery(uint64(m.ActiveDeposits))
	}
	if len(m.DenomStats) > 0 {
		for _, e := range m.DenomStats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalDeposits != 0 {
		n += 1 + sovQuery(uint64(m.TotalDeposits))
	}
	if m.ActiveDeposits != 0 {
		n += 1 + sovQuery(uint64(m.ActiveDeposits))
	}
	l = len(m.TotalValueLocked)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, PrivateDeposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, PrivateDeposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextDepositIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextDepositIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextDepositIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextDepositIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextDepositIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextDepositIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposits", wireType)
			}
			m.TotalDeposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsNullifierUsedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsNullifierUsedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsNullifierUsedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nullifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsNullifierUsedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsNullifierUsedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsNullifierUsedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Used = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentAtHeight", wireType)
			}
			m.SpentAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpentAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpentTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpentTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleRootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleRootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleRootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkleRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkleRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkleRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCount", wireType)
			}
			m.LeafCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeafCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerklePathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerklePathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerklePathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerklePathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerklePathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerklePathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositsByRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositsByRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositsByRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositsByRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositsByRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositsByRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, PrivateDeposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposits", wireType)
			}
			m.TotalDeposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpent", wireType)
			}
			m.TotalSpent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSpent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDeposits", wireType)
			}
			m.ActiveDeposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveDeposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomStats = append(m.DenomStats, DenomStats{})
			if err := m.DenomStats[len(m.DenomStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposits", wireType)
			}
			m.TotalDeposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDeposits", wireType)
			}
			m.ActiveDeposits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveDeposits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValueLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalValueLocked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = append(m.MerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MerkleRoot == nil {
				m.MerkleRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
